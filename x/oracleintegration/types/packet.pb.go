// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ojochainibcdemo/oracleintegration/packet.proto

package types

import (
	bytes "bytes"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	proto "github.com/cosmos/gogoproto/proto"
	_ "github.com/gogo/protobuf/gogoproto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ResolveStatus int32

const (
	RESOLVE_STATUS_OPEN    ResolveStatus = 0
	RESOLVE_STATUS_SUCCESS ResolveStatus = 1
	RESOLVE_STATUS_FAILURE ResolveStatus = 2
	RESOLVE_STATUS_EXPIRED ResolveStatus = 3
)

var ResolveStatus_name = map[int32]string{
	0: "RESOLVE_STATUS_OPEN_UNSPECIFIED",
	1: "RESOLVE_STATUS_SUCCESS",
	2: "RESOLVE_STATUS_FAILURE",
	3: "RESOLVE_STATUS_EXPIRED",
}

var ResolveStatus_value = map[string]int32{
	"RESOLVE_STATUS_OPEN_UNSPECIFIED": 0,
	"RESOLVE_STATUS_SUCCESS":          1,
	"RESOLVE_STATUS_FAILURE":          2,
	"RESOLVE_STATUS_EXPIRED":          3,
}

func (x ResolveStatus) String() string {
	return proto.EnumName(ResolveStatus_name, int32(x))
}

func (ResolveStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ce9ee3339b2e5b11, []int{0}
}

type PriceRequestType int32

const (
	PRICE_REQUEST_RATE      PriceRequestType = 0
	PRICE_REQUEST_MEDIAN    PriceRequestType = 1
	PRICE_REQUEST_DEVIATION PriceRequestType = 2
)

var PriceRequestType_name = map[int32]string{
	0: "PRICE_REQUEST_RATE",
	1: "PRICE_REQUEST_MEDIAN",
	2: "PRICE_REQUEST_DEVIATION",
}

var PriceRequestType_value = map[string]int32{
	"PRICE_REQUEST_RATE":      0,
	"PRICE_REQUEST_MEDIAN":    1,
	"PRICE_REQUEST_DEVIATION": 2,
}

func (x PriceRequestType) String() string {
	return proto.EnumName(PriceRequestType_name, int32(x))
}

func (PriceRequestType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ce9ee3339b2e5b11, []int{1}
}

type OjoOraclePacketData struct {
	// Types that are valid to be assigned to Packet:
	//	*OjoOraclePacketData_NoData
	Packet isOjoOraclePacketData_Packet `protobuf_oneof:"packet"`
}

func (m *OjoOraclePacketData) Reset()         { *m = OjoOraclePacketData{} }
func (m *OjoOraclePacketData) String() string { return proto.CompactTextString(m) }
func (*OjoOraclePacketData) ProtoMessage()    {}
func (*OjoOraclePacketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce9ee3339b2e5b11, []int{0}
}
func (m *OjoOraclePacketData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OjoOraclePacketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OjoOraclePacketData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OjoOraclePacketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OjoOraclePacketData.Merge(m, src)
}
func (m *OjoOraclePacketData) XXX_Size() int {
	return m.Size()
}
func (m *OjoOraclePacketData) XXX_DiscardUnknown() {
	xxx_messageInfo_OjoOraclePacketData.DiscardUnknown(m)
}

var xxx_messageInfo_OjoOraclePacketData proto.InternalMessageInfo

type isOjoOraclePacketData_Packet interface {
	isOjoOraclePacketData_Packet()
	MarshalTo([]byte) (int, error)
	Size() int
}

type OjoOraclePacketData_NoData struct {
	NoData *NoData `protobuf:"bytes,1,opt,name=noData,proto3,oneof" json:"noData,omitempty"`
}

func (*OjoOraclePacketData_NoData) isOjoOraclePacketData_Packet() {}

func (m *OjoOraclePacketData) GetPacket() isOjoOraclePacketData_Packet {
	if m != nil {
		return m.Packet
	}
	return nil
}

func (m *OjoOraclePacketData) GetNoData() *NoData {
	if x, ok := m.GetPacket().(*OjoOraclePacketData_NoData); ok {
		return x.NoData
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*OjoOraclePacketData) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*OjoOraclePacketData_NoData)(nil),
	}
}

type NoData struct {
}

func (m *NoData) Reset()         { *m = NoData{} }
func (m *NoData) String() string { return proto.CompactTextString(m) }
func (*NoData) ProtoMessage()    {}
func (*NoData) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce9ee3339b2e5b11, []int{1}
}
func (m *NoData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NoData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NoData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NoData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NoData.Merge(m, src)
}
func (m *NoData) XXX_Size() int {
	return m.Size()
}
func (m *NoData) XXX_DiscardUnknown() {
	xxx_messageInfo_NoData.DiscardUnknown(m)
}

var xxx_messageInfo_NoData proto.InternalMessageInfo

type OracleRequestPacketData struct {
	ClientID string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	Calldata []byte `protobuf:"bytes,3,opt,name=calldata,proto3" json:"calldata,omitempty"`
}

func (m *OracleRequestPacketData) Reset()         { *m = OracleRequestPacketData{} }
func (m *OracleRequestPacketData) String() string { return proto.CompactTextString(m) }
func (*OracleRequestPacketData) ProtoMessage()    {}
func (*OracleRequestPacketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce9ee3339b2e5b11, []int{2}
}
func (m *OracleRequestPacketData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OracleRequestPacketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OracleRequestPacketData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OracleRequestPacketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OracleRequestPacketData.Merge(m, src)
}
func (m *OracleRequestPacketData) XXX_Size() int {
	return m.Size()
}
func (m *OracleRequestPacketData) XXX_DiscardUnknown() {
	xxx_messageInfo_OracleRequestPacketData.DiscardUnknown(m)
}

var xxx_messageInfo_OracleRequestPacketData proto.InternalMessageInfo

func (m *OracleRequestPacketData) GetClientID() string {
	if m != nil {
		return m.ClientID
	}
	return ""
}

func (m *OracleRequestPacketData) GetCalldata() []byte {
	if m != nil {
		return m.Calldata
	}
	return nil
}

type OracleResponsePacketData struct {
	ClientID      string        `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	RequestID     uint64        `protobuf:"varint,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	RequestTime   int64         `protobuf:"varint,3,opt,name=request_time,json=requestTime,proto3" json:"request_time,omitempty"`
	ResolveTime   int64         `protobuf:"varint,4,opt,name=resolve_time,json=resolveTime,proto3" json:"resolve_time,omitempty"`
	ResolveStatus ResolveStatus `protobuf:"varint,5,opt,name=resolve_status,json=resolveStatus,proto3,enum=ojochainibcdemo.oracleintegration.ResolveStatus" json:"resolve_status,omitempty"`
	Result        []byte        `protobuf:"bytes,6,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *OracleResponsePacketData) Reset()         { *m = OracleResponsePacketData{} }
func (m *OracleResponsePacketData) String() string { return proto.CompactTextString(m) }
func (*OracleResponsePacketData) ProtoMessage()    {}
func (*OracleResponsePacketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce9ee3339b2e5b11, []int{3}
}
func (m *OracleResponsePacketData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OracleResponsePacketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OracleResponsePacketData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OracleResponsePacketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OracleResponsePacketData.Merge(m, src)
}
func (m *OracleResponsePacketData) XXX_Size() int {
	return m.Size()
}
func (m *OracleResponsePacketData) XXX_DiscardUnknown() {
	xxx_messageInfo_OracleResponsePacketData.DiscardUnknown(m)
}

var xxx_messageInfo_OracleResponsePacketData proto.InternalMessageInfo

func (m *OracleResponsePacketData) GetClientID() string {
	if m != nil {
		return m.ClientID
	}
	return ""
}

func (m *OracleResponsePacketData) GetRequestID() uint64 {
	if m != nil {
		return m.RequestID
	}
	return 0
}

func (m *OracleResponsePacketData) GetRequestTime() int64 {
	if m != nil {
		return m.RequestTime
	}
	return 0
}

func (m *OracleResponsePacketData) GetResolveTime() int64 {
	if m != nil {
		return m.ResolveTime
	}
	return 0
}

func (m *OracleResponsePacketData) GetResolveStatus() ResolveStatus {
	if m != nil {
		return m.ResolveStatus
	}
	return RESOLVE_STATUS_OPEN
}

func (m *OracleResponsePacketData) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

type RequestPrice struct {
	Denoms  []string         `protobuf:"bytes,1,rep,name=denoms,proto3" json:"denoms,omitempty"`
	Request PriceRequestType `protobuf:"varint,2,opt,name=request,proto3,enum=ojochainibcdemo.oracleintegration.PriceRequestType" json:"request,omitempty"`
}

func (m *RequestPrice) Reset()         { *m = RequestPrice{} }
func (m *RequestPrice) String() string { return proto.CompactTextString(m) }
func (*RequestPrice) ProtoMessage()    {}
func (*RequestPrice) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce9ee3339b2e5b11, []int{4}
}
func (m *RequestPrice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestPrice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestPrice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestPrice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestPrice.Merge(m, src)
}
func (m *RequestPrice) XXX_Size() int {
	return m.Size()
}
func (m *RequestPrice) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestPrice.DiscardUnknown(m)
}

var xxx_messageInfo_RequestPrice proto.InternalMessageInfo

func (m *RequestPrice) GetDenoms() []string {
	if m != nil {
		return m.Denoms
	}
	return nil
}

func (m *RequestPrice) GetRequest() PriceRequestType {
	if m != nil {
		return m.Request
	}
	return PRICE_REQUEST_RATE
}

type OracleRequestResult struct {
	PriceData []OracleData `protobuf:"bytes,1,rep,name=price_data,json=priceData,proto3" json:"price_data"`
}

func (m *OracleRequestResult) Reset()         { *m = OracleRequestResult{} }
func (m *OracleRequestResult) String() string { return proto.CompactTextString(m) }
func (*OracleRequestResult) ProtoMessage()    {}
func (*OracleRequestResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce9ee3339b2e5b11, []int{5}
}
func (m *OracleRequestResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OracleRequestResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OracleRequestResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OracleRequestResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OracleRequestResult.Merge(m, src)
}
func (m *OracleRequestResult) XXX_Size() int {
	return m.Size()
}
func (m *OracleRequestResult) XXX_DiscardUnknown() {
	xxx_messageInfo_OracleRequestResult.DiscardUnknown(m)
}

var xxx_messageInfo_OracleRequestResult proto.InternalMessageInfo

func (m *OracleRequestResult) GetPriceData() []OracleData {
	if m != nil {
		return m.PriceData
	}
	return nil
}

type OracleData struct {
	ExchangeRate []types.DecCoin `protobuf:"bytes,2,rep,name=exchange_rate,json=exchangeRate,proto3" json:"exchange_rate"`
	BlockNum     []uint64        `protobuf:"varint,3,rep,packed,name=block_num,json=blockNum,proto3" json:"block_num,omitempty"`
}

func (m *OracleData) Reset()         { *m = OracleData{} }
func (m *OracleData) String() string { return proto.CompactTextString(m) }
func (*OracleData) ProtoMessage()    {}
func (*OracleData) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce9ee3339b2e5b11, []int{6}
}
func (m *OracleData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OracleData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OracleData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OracleData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OracleData.Merge(m, src)
}
func (m *OracleData) XXX_Size() int {
	return m.Size()
}
func (m *OracleData) XXX_DiscardUnknown() {
	xxx_messageInfo_OracleData.DiscardUnknown(m)
}

var xxx_messageInfo_OracleData proto.InternalMessageInfo

func (m *OracleData) GetExchangeRate() []types.DecCoin {
	if m != nil {
		return m.ExchangeRate
	}
	return nil
}

func (m *OracleData) GetBlockNum() []uint64 {
	if m != nil {
		return m.BlockNum
	}
	return nil
}

type OracleRequestPacketAcknowledgement struct {
	RequestID uint64 `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Data      []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *OracleRequestPacketAcknowledgement) Reset()         { *m = OracleRequestPacketAcknowledgement{} }
func (m *OracleRequestPacketAcknowledgement) String() string { return proto.CompactTextString(m) }
func (*OracleRequestPacketAcknowledgement) ProtoMessage()    {}
func (*OracleRequestPacketAcknowledgement) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce9ee3339b2e5b11, []int{7}
}
func (m *OracleRequestPacketAcknowledgement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OracleRequestPacketAcknowledgement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OracleRequestPacketAcknowledgement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OracleRequestPacketAcknowledgement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OracleRequestPacketAcknowledgement.Merge(m, src)
}
func (m *OracleRequestPacketAcknowledgement) XXX_Size() int {
	return m.Size()
}
func (m *OracleRequestPacketAcknowledgement) XXX_DiscardUnknown() {
	xxx_messageInfo_OracleRequestPacketAcknowledgement.DiscardUnknown(m)
}

var xxx_messageInfo_OracleRequestPacketAcknowledgement proto.InternalMessageInfo

func (m *OracleRequestPacketAcknowledgement) GetRequestID() uint64 {
	if m != nil {
		return m.RequestID
	}
	return 0
}

func (m *OracleRequestPacketAcknowledgement) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterEnum("ojochainibcdemo.oracleintegration.ResolveStatus", ResolveStatus_name, ResolveStatus_value)
	proto.RegisterEnum("ojochainibcdemo.oracleintegration.PriceRequestType", PriceRequestType_name, PriceRequestType_value)
	proto.RegisterType((*OjoOraclePacketData)(nil), "ojochainibcdemo.oracleintegration.OjoOraclePacketData")
	proto.RegisterType((*NoData)(nil), "ojochainibcdemo.oracleintegration.NoData")
	proto.RegisterType((*OracleRequestPacketData)(nil), "ojochainibcdemo.oracleintegration.OracleRequestPacketData")
	proto.RegisterType((*OracleResponsePacketData)(nil), "ojochainibcdemo.oracleintegration.OracleResponsePacketData")
	proto.RegisterType((*RequestPrice)(nil), "ojochainibcdemo.oracleintegration.RequestPrice")
	proto.RegisterType((*OracleRequestResult)(nil), "ojochainibcdemo.oracleintegration.OracleRequestResult")
	proto.RegisterType((*OracleData)(nil), "ojochainibcdemo.oracleintegration.OracleData")
	proto.RegisterType((*OracleRequestPacketAcknowledgement)(nil), "ojochainibcdemo.oracleintegration.OracleRequestPacketAcknowledgement")
}

func init() {
	proto.RegisterFile("ojochainibcdemo/oracleintegration/packet.proto", fileDescriptor_ce9ee3339b2e5b11)
}

var fileDescriptor_ce9ee3339b2e5b11 = []byte{
	// 819 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0x4f, 0x8f, 0xdb, 0x44,
	0x14, 0x8f, 0x93, 0x10, 0x92, 0xb7, 0xd9, 0x95, 0x35, 0x5b, 0xed, 0x5a, 0x2e, 0x72, 0xdc, 0x9c,
	0xd2, 0x8a, 0x75, 0x68, 0x2a, 0x21, 0x84, 0xb8, 0x24, 0xb1, 0x0b, 0x96, 0xda, 0x24, 0x8c, 0x93,
	0x82, 0x10, 0x92, 0xe5, 0xd8, 0x43, 0xd6, 0xbb, 0xb6, 0x27, 0xd8, 0x93, 0xfe, 0xf9, 0x06, 0x28,
	0x27, 0xbe, 0x40, 0x24, 0x24, 0xbe, 0x00, 0x27, 0x3e, 0x43, 0x8f, 0x3d, 0x72, 0x5a, 0xa1, 0xec,
	0x85, 0xef, 0xc0, 0x05, 0x65, 0x6c, 0xd3, 0xee, 0xe2, 0x6a, 0x57, 0xdc, 0x66, 0xde, 0xef, 0xf7,
	0x7b, 0xef, 0x79, 0xe6, 0xf7, 0x3c, 0xa0, 0xd1, 0x33, 0xea, 0x9e, 0x3a, 0x7e, 0xe4, 0xcf, 0x5d,
	0x8f, 0x84, 0xb4, 0x4b, 0x63, 0xc7, 0x0d, 0x88, 0x1f, 0x31, 0xb2, 0x88, 0x1d, 0xe6, 0xd3, 0xa8,
	0xbb, 0x74, 0xdc, 0x73, 0xc2, 0xb4, 0x65, 0x4c, 0x19, 0x45, 0xf7, 0xae, 0xf1, 0xb5, 0xff, 0xf0,
	0xe5, 0x3b, 0x0b, 0xba, 0xa0, 0x9c, 0xdd, 0xdd, 0xad, 0x52, 0xa1, 0xac, 0xb8, 0x34, 0x09, 0x69,
	0xd2, 0x9d, 0x3b, 0x09, 0xe9, 0x3e, 0x7f, 0x38, 0x27, 0xcc, 0x79, 0xd8, 0x75, 0xa9, 0x1f, 0xa5,
	0x78, 0xdb, 0x83, 0xc3, 0xf1, 0x19, 0x1d, 0xf3, 0x6c, 0x13, 0x5e, 0x51, 0x77, 0x98, 0x83, 0x86,
	0x50, 0x8b, 0xe8, 0x6e, 0x25, 0x09, 0xaa, 0xd0, 0xd9, 0xeb, 0xdd, 0xd7, 0x6e, 0x6c, 0x40, 0x1b,
	0x71, 0xc1, 0x57, 0x25, 0x9c, 0x49, 0x07, 0x75, 0xa8, 0xa5, 0x1f, 0xd1, 0xae, 0x43, 0x2d, 0x45,
	0xdb, 0x3f, 0xc0, 0x71, 0x5a, 0x0c, 0x93, 0x1f, 0x57, 0x24, 0x61, 0xef, 0xd4, 0xbc, 0x0f, 0x0d,
	0x37, 0xf0, 0x49, 0xc4, 0x6c, 0xdf, 0xe3, 0x65, 0x1b, 0x83, 0xe6, 0xf6, 0xa2, 0x55, 0x1f, 0xf2,
	0xa0, 0xa9, 0xe3, 0x7a, 0x0a, 0x9b, 0x1e, 0x92, 0xa1, 0xee, 0x3a, 0x41, 0xe0, 0xed, 0x1a, 0xac,
	0xa8, 0x42, 0xa7, 0x89, 0xff, 0xdd, 0x7f, 0x5e, 0xfd, 0xeb, 0x97, 0x96, 0xd0, 0xfe, 0xad, 0x0c,
	0x52, 0x5e, 0x28, 0x59, 0xd2, 0x28, 0x21, 0xff, 0xaf, 0xd2, 0xc7, 0x00, 0x71, 0xda, 0xe9, 0x8e,
	0x5b, 0x56, 0x85, 0x4e, 0x75, 0xb0, 0xbf, 0xbd, 0x68, 0x35, 0xb2, 0xfe, 0x4d, 0x1d, 0x37, 0x32,
	0x82, 0xe9, 0xa1, 0x7b, 0xd0, 0xcc, 0xd9, 0xcc, 0x0f, 0x09, 0xef, 0xad, 0x82, 0xf7, 0xb2, 0xd8,
	0xd4, 0x0f, 0x49, 0x4a, 0x49, 0x68, 0xf0, 0x9c, 0xa4, 0x94, 0x6a, 0x4e, 0xe1, 0x31, 0x4e, 0xf9,
	0x06, 0x0e, 0x72, 0x4a, 0xc2, 0x1c, 0xb6, 0x4a, 0xa4, 0x0f, 0x54, 0xa1, 0x73, 0xd0, 0xfb, 0xe4,
	0x16, 0x97, 0x80, 0x53, 0xa1, 0xc5, 0x75, 0x78, 0x3f, 0x7e, 0x77, 0x8b, 0x8e, 0xa0, 0x16, 0x93,
	0x64, 0x15, 0x30, 0xa9, 0xc6, 0x0f, 0x2d, 0xdb, 0x65, 0x47, 0xb6, 0x82, 0x66, 0x7e, 0x29, 0xb1,
	0xef, 0x92, 0x1d, 0xdb, 0x23, 0x11, 0x0d, 0x13, 0x49, 0x50, 0x2b, 0x9d, 0x06, 0xce, 0x76, 0xe8,
	0x29, 0x7c, 0x98, 0x7d, 0x10, 0x3f, 0x8f, 0x83, 0xde, 0xa3, 0x5b, 0xf4, 0xc5, 0x53, 0x66, 0xe9,
	0xa7, 0xaf, 0x96, 0x04, 0xe7, 0x39, 0xda, 0x3e, 0x1c, 0x5e, 0x71, 0x04, 0xe6, 0x3d, 0x21, 0x0c,
	0xb0, 0xdc, 0x69, 0x6c, 0x2f, 0x75, 0x61, 0xa5, 0xb3, 0xd7, 0x3b, 0xb9, 0x45, 0xa1, 0x34, 0x17,
	0xf7, 0x5f, 0xf5, 0xf5, 0x45, 0xab, 0x84, 0x1b, 0x3c, 0x0d, 0x37, 0x5f, 0x0c, 0xf0, 0x16, 0x46,
	0x5f, 0xc2, 0x3e, 0x79, 0xe9, 0x9e, 0x3a, 0xd1, 0x82, 0xd8, 0xb1, 0xc3, 0x88, 0x54, 0xe6, 0x45,
	0x3e, 0xd2, 0xd2, 0x91, 0xd1, 0x76, 0x23, 0xa3, 0x65, 0x23, 0xa3, 0xe9, 0xc4, 0x1d, 0x52, 0x3f,
	0xca, 0x72, 0x36, 0x73, 0x21, 0x76, 0x18, 0x41, 0x77, 0xa1, 0x31, 0x0f, 0xa8, 0x7b, 0x6e, 0x47,
	0xab, 0x50, 0xaa, 0xa8, 0x95, 0x4e, 0x15, 0xd7, 0x79, 0x60, 0xb4, 0x0a, 0xdb, 0x01, 0xb4, 0x0b,
	0x0c, 0xdf, 0x77, 0xcf, 0x23, 0xfa, 0x22, 0x20, 0xde, 0x82, 0x84, 0x24, 0x62, 0xd7, 0x6c, 0x26,
	0xdc, 0x60, 0x33, 0x04, 0x55, 0x7e, 0x2a, 0x65, 0x7e, 0x8b, 0xd5, 0xb7, 0xb6, 0x7f, 0xf0, 0xb7,
	0x00, 0xfb, 0x57, 0x2c, 0x80, 0xbe, 0x80, 0x16, 0x36, 0xac, 0xf1, 0x93, 0x67, 0x86, 0x6d, 0x4d,
	0xfb, 0xd3, 0x99, 0x65, 0x8f, 0x27, 0xc6, 0xc8, 0x9e, 0x8d, 0xac, 0x89, 0x31, 0x34, 0x1f, 0x9b,
	0x86, 0x2e, 0x96, 0xe4, 0xe3, 0xf5, 0x46, 0x3d, 0x2c, 0xa0, 0xa1, 0x4f, 0xe1, 0xe8, 0x5a, 0xd8,
	0x9a, 0x0d, 0x87, 0x86, 0x65, 0x89, 0x82, 0x2c, 0xaf, 0x37, 0xea, 0x7b, 0xd0, 0x02, 0xdd, 0xe3,
	0xbe, 0xf9, 0x64, 0x86, 0x0d, 0xb1, 0x5c, 0xa8, 0xcb, 0xd0, 0x02, 0x9d, 0xf1, 0xed, 0xc4, 0xc4,
	0x86, 0x2e, 0x56, 0x0a, 0x75, 0x19, 0x2a, 0x57, 0x7f, 0xfa, 0x55, 0x29, 0x3d, 0xf8, 0x5d, 0x00,
	0xf1, 0xba, 0xd1, 0x90, 0x06, 0x68, 0x82, 0xcd, 0xa1, 0x61, 0x63, 0xe3, 0xeb, 0x99, 0x61, 0x4d,
	0x6d, 0xdc, 0x9f, 0x1a, 0x62, 0x49, 0x3e, 0x5a, 0x6f, 0xd4, 0x02, 0x04, 0xf5, 0xe0, 0xce, 0xd5,
	0xe8, 0x53, 0x43, 0x37, 0xfb, 0x23, 0x51, 0x90, 0xa5, 0xf5, 0x46, 0x2d, 0xc4, 0xd0, 0x67, 0x70,
	0x7c, 0x35, 0xae, 0x1b, 0xcf, 0xcc, 0xfe, 0xd4, 0x1c, 0x8f, 0xc4, 0xb2, 0x7c, 0x77, 0xbd, 0x51,
	0xdf, 0x07, 0xa7, 0x8d, 0x0f, 0xbe, 0x7f, 0xbd, 0x55, 0x84, 0x37, 0x5b, 0x45, 0xf8, 0x73, 0xab,
	0x08, 0x3f, 0x5f, 0x2a, 0xa5, 0x37, 0x97, 0x4a, 0xe9, 0x8f, 0x4b, 0xa5, 0xf4, 0xdd, 0x60, 0xe1,
	0xb3, 0xd3, 0xd5, 0x5c, 0x73, 0x69, 0xd8, 0xa5, 0x67, 0xf4, 0x24, 0x22, 0xec, 0x05, 0x8d, 0xcf,
	0xf9, 0x3a, 0x9f, 0x84, 0x13, 0xfe, 0x82, 0xbc, 0x2c, 0x78, 0x43, 0xd8, 0xab, 0x25, 0x49, 0xe6,
	0x35, 0xfe, 0xab, 0x7f, 0xf4, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x93, 0xe5, 0xcd, 0x11, 0x75,
	0x06, 0x00, 0x00,
}

func (this *OracleRequestPacketData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OracleRequestPacketData)
	if !ok {
		that2, ok := that.(OracleRequestPacketData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ClientID != that1.ClientID {
		return false
	}
	if !bytes.Equal(this.Calldata, that1.Calldata) {
		return false
	}
	return true
}
func (this *OracleResponsePacketData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OracleResponsePacketData)
	if !ok {
		that2, ok := that.(OracleResponsePacketData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ClientID != that1.ClientID {
		return false
	}
	if this.RequestID != that1.RequestID {
		return false
	}
	if this.RequestTime != that1.RequestTime {
		return false
	}
	if this.ResolveTime != that1.ResolveTime {
		return false
	}
	if this.ResolveStatus != that1.ResolveStatus {
		return false
	}
	if !bytes.Equal(this.Result, that1.Result) {
		return false
	}
	return true
}
func (this *OracleRequestPacketAcknowledgement) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OracleRequestPacketAcknowledgement)
	if !ok {
		that2, ok := that.(OracleRequestPacketAcknowledgement)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RequestID != that1.RequestID {
		return false
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	return true
}
func (m *OjoOraclePacketData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OjoOraclePacketData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OjoOraclePacketData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Packet != nil {
		{
			size := m.Packet.Size()
			i -= size
			if _, err := m.Packet.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *OjoOraclePacketData_NoData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OjoOraclePacketData_NoData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NoData != nil {
		{
			size, err := m.NoData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *NoData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NoData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NoData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *OracleRequestPacketData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OracleRequestPacketData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OracleRequestPacketData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Calldata) > 0 {
		i -= len(m.Calldata)
		copy(dAtA[i:], m.Calldata)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Calldata)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ClientID) > 0 {
		i -= len(m.ClientID)
		copy(dAtA[i:], m.ClientID)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.ClientID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OracleResponsePacketData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OracleResponsePacketData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OracleResponsePacketData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		i -= len(m.Result)
		copy(dAtA[i:], m.Result)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Result)))
		i--
		dAtA[i] = 0x32
	}
	if m.ResolveStatus != 0 {
		i = encodeVarintPacket(dAtA, i, uint64(m.ResolveStatus))
		i--
		dAtA[i] = 0x28
	}
	if m.ResolveTime != 0 {
		i = encodeVarintPacket(dAtA, i, uint64(m.ResolveTime))
		i--
		dAtA[i] = 0x20
	}
	if m.RequestTime != 0 {
		i = encodeVarintPacket(dAtA, i, uint64(m.RequestTime))
		i--
		dAtA[i] = 0x18
	}
	if m.RequestID != 0 {
		i = encodeVarintPacket(dAtA, i, uint64(m.RequestID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ClientID) > 0 {
		i -= len(m.ClientID)
		copy(dAtA[i:], m.ClientID)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.ClientID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RequestPrice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestPrice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestPrice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Request != 0 {
		i = encodeVarintPacket(dAtA, i, uint64(m.Request))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Denoms) > 0 {
		for iNdEx := len(m.Denoms) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Denoms[iNdEx])
			copy(dAtA[i:], m.Denoms[iNdEx])
			i = encodeVarintPacket(dAtA, i, uint64(len(m.Denoms[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *OracleRequestResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OracleRequestResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OracleRequestResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PriceData) > 0 {
		for iNdEx := len(m.PriceData) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PriceData[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPacket(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *OracleData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OracleData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OracleData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BlockNum) > 0 {
		dAtA3 := make([]byte, len(m.BlockNum)*10)
		var j2 int
		for _, num := range m.BlockNum {
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		i -= j2
		copy(dAtA[i:], dAtA3[:j2])
		i = encodeVarintPacket(dAtA, i, uint64(j2))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ExchangeRate) > 0 {
		for iNdEx := len(m.ExchangeRate) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ExchangeRate[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPacket(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	return len(dAtA) - i, nil
}

func (m *OracleRequestPacketAcknowledgement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OracleRequestPacketAcknowledgement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OracleRequestPacketAcknowledgement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	if m.RequestID != 0 {
		i = encodeVarintPacket(dAtA, i, uint64(m.RequestID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPacket(dAtA []byte, offset int, v uint64) int {
	offset -= sovPacket(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *OjoOraclePacketData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Packet != nil {
		n += m.Packet.Size()
	}
	return n
}

func (m *OjoOraclePacketData_NoData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoData != nil {
		l = m.NoData.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}
func (m *NoData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *OracleRequestPacketData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClientID)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = len(m.Calldata)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}

func (m *OracleResponsePacketData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClientID)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	if m.RequestID != 0 {
		n += 1 + sovPacket(uint64(m.RequestID))
	}
	if m.RequestTime != 0 {
		n += 1 + sovPacket(uint64(m.RequestTime))
	}
	if m.ResolveTime != 0 {
		n += 1 + sovPacket(uint64(m.ResolveTime))
	}
	if m.ResolveStatus != 0 {
		n += 1 + sovPacket(uint64(m.ResolveStatus))
	}
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}

func (m *RequestPrice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Denoms) > 0 {
		for _, s := range m.Denoms {
			l = len(s)
			n += 1 + l + sovPacket(uint64(l))
		}
	}
	if m.Request != 0 {
		n += 1 + sovPacket(uint64(m.Request))
	}
	return n
}

func (m *OracleRequestResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PriceData) > 0 {
		for _, e := range m.PriceData {
			l = e.Size()
			n += 1 + l + sovPacket(uint64(l))
		}
	}
	return n
}

func (m *OracleData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ExchangeRate) > 0 {
		for _, e := range m.ExchangeRate {
			l = e.Size()
			n += 1 + l + sovPacket(uint64(l))
		}
	}
	if len(m.BlockNum) > 0 {
		l = 0
		for _, e := range m.BlockNum {
			l += sovPacket(uint64(e))
		}
		n += 1 + sovPacket(uint64(l)) + l
	}
	return n
}

func (m *OracleRequestPacketAcknowledgement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestID != 0 {
		n += 1 + sovPacket(uint64(m.RequestID))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}

func sovPacket(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPacket(x uint64) (n int) {
	return sovPacket(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *OjoOraclePacketData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OjoOraclePacketData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OjoOraclePacketData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NoData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Packet = &OjoOraclePacketData_NoData{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NoData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NoData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NoData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OracleRequestPacketData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OracleRequestPacketData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OracleRequestPacketData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Calldata", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Calldata = append(m.Calldata[:0], dAtA[iNdEx:postIndex]...)
			if m.Calldata == nil {
				m.Calldata = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OracleResponsePacketData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OracleResponsePacketData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OracleResponsePacketData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestID", wireType)
			}
			m.RequestID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestTime", wireType)
			}
			m.RequestTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResolveTime", wireType)
			}
			m.ResolveTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResolveTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResolveStatus", wireType)
			}
			m.ResolveStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResolveStatus |= ResolveStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result[:0], dAtA[iNdEx:postIndex]...)
			if m.Result == nil {
				m.Result = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestPrice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestPrice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestPrice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denoms", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denoms = append(m.Denoms, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			m.Request = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Request |= PriceRequestType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OracleRequestResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OracleRequestResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OracleRequestResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PriceData = append(m.PriceData, OracleData{})
			if err := m.PriceData[len(m.PriceData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OracleData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OracleData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OracleData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangeRate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExchangeRate = append(m.ExchangeRate, types.DecCoin{})
			if err := m.ExchangeRate[len(m.ExchangeRate)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPacket
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.BlockNum = append(m.BlockNum, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPacket
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPacket
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthPacket
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.BlockNum) == 0 {
					m.BlockNum = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPacket
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.BlockNum = append(m.BlockNum, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockNum", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OracleRequestPacketAcknowledgement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OracleRequestPacketAcknowledgement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OracleRequestPacketAcknowledgement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestID", wireType)
			}
			m.RequestID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPacket(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPacket
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPacket
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPacket
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPacket        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPacket          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPacket = fmt.Errorf("proto: unexpected end of group")
)
